{"version":3,"sources":["/Users/apple/codes/dataVision-dui/docs/使用说明.mdx","/Users/apple/codes/dataVision-dui/docs/开发规范.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oXAYMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,uFACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,8SACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,6qBA8BL,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iCAIL,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2N,uLAkBTJ,EAAWK,gBAAiB,G,2TC3EtBN,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,8CADR,8CAGA,sBACE,kBAAIC,WAAW,MAAf,kLAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,mNAUL,sBACE,kBAAIA,WAAW,MAAf,iSAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,uMAYL,sBACE,kBAAIA,WAAW,MAAf,uEAAqC,0BAAYA,WAAW,MAAvB,SAArC,2DAAsG,0BAAYA,WAAW,MAAvB,kCAAtG,gDAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,4PAqBL,iBAAQ,CACN,GAAM,oJADR,oJAGA,sBACE,kBAAIA,WAAW,MAAf,2OACA,kBAAIA,WAAW,MAAf,iCAA6B,0BAAYA,WAAW,MAAvB,MAA7B,sGACA,kBAAIA,WAAW,MAAf,8IAEF,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,2LAQL,sBACE,kBAAIA,WAAW,MAAf,0OACA,kBAAIA,WAAW,MAAf,yGAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0MAaL,iBAAQ,CACN,GAAM,4BADR,4BAGA,sBACE,kBAAIA,WAAW,MAAf,yJAAiD,0BAAYA,WAAW,MAAvB,SAAjD,iCAA4G,0BAAYA,WAAW,MAAvB,QAA5G,uCAAuK,0BAAYA,WAAW,MAAvB,aACvK,kBAAIA,WAAW,MAAf,sIACA,kBAAIA,WAAW,MAAf,oDAAiC,0BAAYA,WAAW,MAAvB,gBAAjC,2O,uLAMNJ,EAAWK,gBAAiB","file":"static/js/docs.104e8bea.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"说明\"\n    }}>{`说明`}</h1>\n    <p>{`数据可视化大屏UI组件库`}</p>\n    <h1 {...{\n      \"id\": \"开发\"\n    }}>{`开发`}</h1>\n    <p>{`在对应的分类下创建文件夹，文件夹以组件名命名，并增加example文件夹，引入对应的组件进行开发，例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`---\nname: 边框-2\nmenu: 边框\n---\n\nimport { Props, Playground } from 'docz'\nimport Border2 from '../index'\n\n## 组件名\n\n\\`<Border2 />\\`\n\n## 基本属性\n\n| 属性名 | 描述 | 类型 | 默认值 | 必填项\n| :----: | :----: | :----: | :----: | :----: |\n| \\`children\\` | 边框内的元素 | 任意类型 | 无 | 是\n\n## 基本使用\n\n<Playground>\n  <div style={{position: 'relative', width: 300, height: 250}}>\n    <Border2 width={270} height={240}>\n      外面有个边框\n    </Border2>\n  </div>\n</Playground>\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"安装\"\n    }}>{`安装`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @cecdataFE/dui\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"使用\"\n    }}>{`使用`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Border1 } from '@cecdataFE/dui'\n\nclass Demo extends React.Component {\n  render () {\n    return (\n        <Border1>\n          这是一个边框\n        </Border1>\n    )\n  }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"组件的设计规范\"\n    }}>{`组件的设计规范`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`支持使用者传入自定义的 className 到根节点，并置于组件类名的最后。`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-react\"\n      }}>{`import cx from 'classnames'\nclass Demo extends React.Component {\n  render () {\n    const newClassName = cx('dui-animate-pics', this.props.className)\n    return <div className={newClassName} />\n  }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`支持使用者传入自定义的 style 到根节点，如果内部也直接应用了 style，需要将用户传入的 style 对象和其进行合并。`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-react\"\n      }}>{`class Demo extends React.Component {\n  render () {\n    const newStyle = {\n        ...this.props.style,\n        height: this.props.height\n    }\n    return <div style={newStyle} />\n  }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`组件根节点，类名一律以  `}<inlineCode parentName=\"li\">{`.dui-`}</inlineCode>{` 前缀开头，子节点以 `}<inlineCode parentName=\"li\">{`根结点类名`}</inlineCode>{` 作为扩展前缀。`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`.dui-decorate4 {\n  display: flex;\n  box-sizing: border-box;\n\n  &-item {\n  font-size: 12px\n  }\n}\n\n// scss 编译后\n.dui-decorate4 {\n  display: flex;\n  box-sizing: border-box;\n}\n.dui-decorate4-item {\n  font-size: 12px\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"编写组件代码注意项（如何让组件扩展性强，更通用）\"\n    }}>{`编写组件代码注意项（如何让组件扩展性强，更通用）`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`编写的组件要能方便用于手工编写代码引用，也要满足dui编辑器自由改变尺寸，方便配置`}</li>\n      <li parentName=\"ul\">{`尽量不要用`}<inlineCode parentName=\"li\">{`px`}</inlineCode>{`写死width，height等CSS尺寸，尽量使用百分比`}</li>\n      <li parentName=\"ul\">{`如何获取组件的长宽尺寸，在componentDidMount之后的生命周期`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`import ReactDom from 'react-dom'\n\ncomponentDidMount () {\n    const root = ReactDom.findDOMNode(this)\n    const width = root.offsetWidth\n    const height = root.offsetHeight\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`组件的defaultProps尽量写完整，设计组件的props时尽量扁平化，方便dui编辑器拖出组件能预览效果`}</li>\n      <li parentName=\"ul\">{`鼓励使用css variables，方便dui编辑器读取配置`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`// 组件根节点\n.dui-component-name {\n  --font-size: 14px;\n\n  // 在后续的节点使用\n  .sub-class {\n    font-size: var(--font-size);\n  }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"目录结构\"\n    }}>{`目录结构`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`在对应的分类下创建文件夹，文件夹以组件名命名，例如`}<inlineCode parentName=\"li\">{`Box-1`}</inlineCode>{`，组件名为`}<inlineCode parentName=\"li\">{`Box1`}</inlineCode>{`，入口文件为`}<inlineCode parentName=\"li\">{`index.js`}</inlineCode></li>\n      <li parentName=\"ul\">{`组件文件夹下增加example文件夹，编写组件使用文档mdx`}</li>\n      <li parentName=\"ul\">{`导出组件不需要在 `}<inlineCode parentName=\"li\">{`src/index.js`}</inlineCode>{` 手写，该文件遍历目录结构自动生成，注意即便在不同的分类的里面，组件也不能重名`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}